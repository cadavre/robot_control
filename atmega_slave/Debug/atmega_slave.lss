
atmega_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000012c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800066  00800066  000001c6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000919  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000005c  00000000  00000000  00000939  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000124  00000000  00000000  00000995  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000c0  00000000  00000000  00000ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000014c  00000000  00000000  00000b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000040  00000000  00000000  00000cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000d1  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  00000dd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	3d c0       	rjmp	.+122    	; 0x90 <__vector_10>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e2       	ldi	r30, 0x2C	; 44
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 36       	cpi	r26, 0x6D	; 109
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	5b d0       	rcall	.+182    	; 0x110 <main>
  5a:	66 c0       	rjmp	.+204    	; 0x128 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <SPI_init>:
volatile uint8_t j = 0;

/*
 * SPI transfer interface initialization
 */
void SPI_init(void) {
  5e:	df 93       	push	r29
  60:	cf 93       	push	r28
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
	DDRB |= MISO;
  66:	87 e3       	ldi	r24, 0x37	; 55
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	27 e3       	ldi	r18, 0x37	; 55
  6c:	30 e0       	ldi	r19, 0x00	; 0
  6e:	f9 01       	movw	r30, r18
  70:	20 81       	ld	r18, Z
  72:	20 61       	ori	r18, 0x10	; 16
  74:	fc 01       	movw	r30, r24
  76:	20 83       	st	Z, r18
	SPCR |= (1<<SPIE)|(1<<SPE);
  78:	8d e2       	ldi	r24, 0x2D	; 45
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	2d e2       	ldi	r18, 0x2D	; 45
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	f9 01       	movw	r30, r18
  82:	20 81       	ld	r18, Z
  84:	20 6c       	ori	r18, 0xC0	; 192
  86:	fc 01       	movw	r30, r24
  88:	20 83       	st	Z, r18
}
  8a:	cf 91       	pop	r28
  8c:	df 91       	pop	r29
  8e:	08 95       	ret

00000090 <__vector_10>:

/*
 * SPI interrupt handle
 * - r/w
 */
ISR(SPI_STC_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	btn_state[j] = SPDR;
  ae:	80 91 6c 00 	lds	r24, 0x006C
  b2:	88 2f       	mov	r24, r24
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	2f e2       	ldi	r18, 0x2F	; 47
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	f9 01       	movw	r30, r18
  bc:	20 81       	ld	r18, Z
  be:	8a 59       	subi	r24, 0x9A	; 154
  c0:	9f 4f       	sbci	r25, 0xFF	; 255
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
	if(j<5) {
  c6:	80 91 6c 00 	lds	r24, 0x006C
  ca:	85 30       	cpi	r24, 0x05	; 5
  cc:	30 f4       	brcc	.+12     	; 0xda <__vector_10+0x4a>
		j++;
  ce:	80 91 6c 00 	lds	r24, 0x006C
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	80 93 6c 00 	sts	0x006C, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <__vector_10+0x4e>
	} else {
		j = 0;
  da:	10 92 6c 00 	sts	0x006C, r1
	}
	SPDR = drive_state[j];
  de:	8f e2       	ldi	r24, 0x2F	; 47
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	20 91 6c 00 	lds	r18, 0x006C
  e6:	22 2f       	mov	r18, r18
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	20 5a       	subi	r18, 0xA0	; 160
  ec:	3f 4f       	sbci	r19, 0xFF	; 255
  ee:	f9 01       	movw	r30, r18
  f0:	20 81       	ld	r18, Z
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
}
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	ff 91       	pop	r31
  fc:	ef 91       	pop	r30
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	3f 91       	pop	r19
 104:	2f 91       	pop	r18
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <main>:

int main(void)
{
 110:	df 93       	push	r29
 112:	cf 93       	push	r28
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
	SPI_init();
 118:	a2 df       	rcall	.-188    	; 0x5e <SPI_init>
	sei();
 11a:	78 94       	sei
	while(1)
	{
		drive_state[0]++;
 11c:	80 91 60 00 	lds	r24, 0x0060
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 60 00 	sts	0x0060, r24
	}
 126:	fa cf       	rjmp	.-12     	; 0x11c <main+0xc>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
