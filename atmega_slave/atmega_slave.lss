
atmega_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000003b6  0000044a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800068  00800068  00000452  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000127  00000000  00000000  00000bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000306  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000139  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000402  00000000  00000000  0000112b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b0  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000017a  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000078  00000000  00000000  0000175a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000002b  00000000  00000000  000017d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	78 c1       	rjmp	.+752    	; 0x304 <__vector_9>
  14:	53 c0       	rjmp	.+166    	; 0xbc <__vector_10>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	79 c0       	rjmp	.+242    	; 0x110 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 eb       	ldi	r30, 0xB6	; 182
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 36       	cpi	r26, 0x68	; 104
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a8 e6       	ldi	r26, 0x68	; 104
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 37       	cpi	r26, 0x78	; 120
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	6a d0       	rcall	.+212    	; 0x12e <main>
  5a:	ab c1       	rjmp	.+854    	; 0x3b2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <motor_ports_init>:

/*
 * Initialize ports for stepping motors outputs
 */
void motor_ports_init(void) {
	DDRD |= MOTOR_PD;
  5e:	81 b3       	in	r24, 0x11	; 17
  60:	80 6f       	ori	r24, 0xF0	; 240
  62:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(MOTOR_PD);
  64:	82 b3       	in	r24, 0x12	; 18
  66:	8f 70       	andi	r24, 0x0F	; 15
  68:	82 bb       	out	0x12, r24	; 18
	DDRC |= MOTOR_PC;
  6a:	84 b3       	in	r24, 0x14	; 20
  6c:	8c 63       	ori	r24, 0x3C	; 60
  6e:	84 bb       	out	0x14, r24	; 20
	PORTD &= ~(MOTOR_PC);
  70:	82 b3       	in	r24, 0x12	; 18
  72:	83 7c       	andi	r24, 0xC3	; 195
  74:	82 bb       	out	0x12, r24	; 18
	// set ports to default STEP1
	M0_STEP1;
  76:	82 b3       	in	r24, 0x12	; 18
  78:	80 63       	ori	r24, 0x30	; 48
  7a:	82 bb       	out	0x12, r24	; 18
  7c:	82 b3       	in	r24, 0x12	; 18
  7e:	8f 73       	andi	r24, 0x3F	; 63
  80:	82 bb       	out	0x12, r24	; 18
	M1_STEP1;
  82:	85 b3       	in	r24, 0x15	; 21
  84:	84 62       	ori	r24, 0x24	; 36
  86:	85 bb       	out	0x15, r24	; 21
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	87 7e       	andi	r24, 0xE7	; 231
  8c:	85 bb       	out	0x15, r24	; 21
}
  8e:	08 95       	ret

00000090 <ADC_init>:

/*
 * Analog-Digital-Converter interface initialization
 */
void ADC_init(void) {
	ADMUX |= (1<<REFS0)|(1<<REFS1);								// 2,56V
  90:	87 b1       	in	r24, 0x07	; 7
  92:	80 6c       	ori	r24, 0xC0	; 192
  94:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<ADLAR);										// ADCH only
  96:	3d 9a       	sbi	0x07, 5	; 7
																// ADC0 by default
	ADCSRA |= (1<<ADIE);										// ADC interrupt flag
  98:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA |= (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);		// prescaler 128
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	87 68       	ori	r24, 0x87	; 135
  9e:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADSC);										// initial measurement
  a0:	36 9a       	sbi	0x06, 6	; 6
}
  a2:	08 95       	ret

000000a4 <SPI_init>:

/*
 * SPI transfer interface initialization
 */
void SPI_init(void) {
	DDRB |= MISO;
  a4:	bc 9a       	sbi	0x17, 4	; 23
	SPCR |= (1<<SPIE)|(1<<SPE);
  a6:	8d b1       	in	r24, 0x0d	; 13
  a8:	80 6c       	ori	r24, 0xC0	; 192
  aa:	8d b9       	out	0x0d, r24	; 13
}
  ac:	08 95       	ret

000000ae <Timer0_init>:

/*
 * Initialize Timer0 for switching steps on stepping motors
 */
void Timer0_init(void) {
	TCCR0 |= (1<<CS00);							// no prescaler
  ae:	83 b7       	in	r24, 0x33	; 51
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);						// overflow IRQ
  b4:	89 b7       	in	r24, 0x39	; 57
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	89 bf       	out	0x39, r24	; 57
}
  ba:	08 95       	ret

000000bc <__vector_10>:

/*
 * SPI interrupt handle
 * - r/w
 */
ISR(SPI_STC_vect) {
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	btn_state[j] = SPDR;
  cc:	e0 91 74 00 	lds	r30, 0x0074
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	8f b1       	in	r24, 0x0f	; 15
  d4:	e2 59       	subi	r30, 0x92	; 146
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	80 83       	st	Z, r24
	if(j<5) {
  da:	80 91 74 00 	lds	r24, 0x0074
  de:	85 30       	cpi	r24, 0x05	; 5
  e0:	30 f4       	brcc	.+12     	; 0xee <__vector_10+0x32>
		j++;
  e2:	80 91 74 00 	lds	r24, 0x0074
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 74 00 	sts	0x0074, r24
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__vector_10+0x36>
	} else {
		j = 0;
  ee:	10 92 74 00 	sts	0x0074, r1
	}
	SPDR = drive_state[j];
  f2:	e0 91 74 00 	lds	r30, 0x0074
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	e8 59       	subi	r30, 0x98	; 152
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	80 81       	ld	r24, Z
  fe:	8f b9       	out	0x0f, r24	; 15
}
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <__vector_14>:
/*
 * ADC interrupt handler
 * - take value as raw 8bit reading
 * - update SPI data of speed
 */
ISR(ADC_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
	// 0 - 255
	drive_state[5] = ADCH;
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	80 93 6d 00 	sts	0x006D, r24
}
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <main>:

/************************************************* MAIN *************************************************/
int main(void)
{
	motor_ports_init();
 12e:	97 df       	rcall	.-210    	; 0x5e <motor_ports_init>
	Timer0_init();
 130:	be df       	rcall	.-132    	; 0xae <Timer0_init>
	SPI_init();
 132:	b8 df       	rcall	.-144    	; 0xa4 <SPI_init>
	ADC_init();
 134:	ad df       	rcall	.-166    	; 0x90 <ADC_init>
	sei();
 136:	78 94       	sei
	while(1)
	{
		if (btn_get_flag==BTN_GET_ON) {
 138:	80 91 75 00 	lds	r24, 0x0075
 13c:	84 30       	cpi	r24, 0x04	; 4
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0xa>
			//drive_state[1] = (servo_pos_raw[1] - SERVO_MIN+50) / SERVO_STEPS_PER_DEG;		// +50 dla wyrównania 0 stopni
			//drive_state[2] = motor_pos[1] / M1_RATIO;																					// TEMP: dzielenie zamiast mno¿enia!
			//drive_state[3] = (servo_pos_raw[2] - SERVO_MIN+50) / SERVO_STEPS_PER_DEG;

			// measure value for speed
			ADCSRA |= (1<<ADSC);
 140:	36 9a       	sbi	0x06, 6	; 6
			} else {
				motor_speed[1] = servo_speed;
			}*/

			// clear button flag
			btn_get_flag = 0;
 142:	10 92 75 00 	sts	0x0075, r1
 146:	f8 cf       	rjmp	.-16     	; 0x138 <main+0xa>

00000148 <motor_make_step>:

/*
 *	Toggle ports states to switch coil set - make step
 */
void motor_make_step(uint8_t motor, uint8_t step) {
	if (step>8) {
 148:	69 30       	cpi	r22, 0x09	; 9
 14a:	18 f4       	brcc	.+6      	; 0x152 <motor_make_step+0xa>
		step = 1;
	} else if (step<1) {
 14c:	66 23       	and	r22, r22
 14e:	19 f0       	breq	.+6      	; 0x156 <motor_make_step+0xe>
 150:	03 c0       	rjmp	.+6      	; 0x158 <motor_make_step+0x10>
/*
 *	Toggle ports states to switch coil set - make step
 */
void motor_make_step(uint8_t motor, uint8_t step) {
	if (step>8) {
		step = 1;
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	01 c0       	rjmp	.+2      	; 0x158 <motor_make_step+0x10>
	} else if (step<1) {
		step = 8;
 156:	68 e0       	ldi	r22, 0x08	; 8
	}
	if (motor==0) {
 158:	88 23       	and	r24, r24
 15a:	d1 f5       	brne	.+116    	; 0x1d0 <motor_make_step+0x88>
		switch(step) {
 15c:	65 30       	cpi	r22, 0x05	; 5
 15e:	21 f1       	breq	.+72     	; 0x1a8 <motor_make_step+0x60>
 160:	66 30       	cpi	r22, 0x06	; 6
 162:	38 f4       	brcc	.+14     	; 0x172 <motor_make_step+0x2a>
 164:	63 30       	cpi	r22, 0x03	; 3
 166:	b1 f0       	breq	.+44     	; 0x194 <motor_make_step+0x4c>
 168:	64 30       	cpi	r22, 0x04	; 4
 16a:	d0 f4       	brcc	.+52     	; 0x1a0 <motor_make_step+0x58>
 16c:	62 30       	cpi	r22, 0x02	; 2
 16e:	39 f4       	brne	.+14     	; 0x17e <motor_make_step+0x36>
 170:	0c c0       	rjmp	.+24     	; 0x18a <motor_make_step+0x42>
 172:	67 30       	cpi	r22, 0x07	; 7
 174:	19 f1       	breq	.+70     	; 0x1bc <motor_make_step+0x74>
 176:	67 30       	cpi	r22, 0x07	; 7
 178:	e8 f0       	brcs	.+58     	; 0x1b4 <motor_make_step+0x6c>
 17a:	68 30       	cpi	r22, 0x08	; 8
 17c:	29 f1       	breq	.+74     	; 0x1c8 <motor_make_step+0x80>
			case 1:
				M0_STEP1;
 17e:	92 b3       	in	r25, 0x12	; 18
 180:	90 63       	ori	r25, 0x30	; 48
 182:	92 bb       	out	0x12, r25	; 18
 184:	92 b3       	in	r25, 0x12	; 18
 186:	9f 73       	andi	r25, 0x3F	; 63
 188:	03 c0       	rjmp	.+6      	; 0x190 <motor_make_step+0x48>
				break;
			case 2:
				M0_STEP2;
 18a:	95 9a       	sbi	0x12, 5	; 18
 18c:	92 b3       	in	r25, 0x12	; 18
 18e:	9f 72       	andi	r25, 0x2F	; 47
 190:	92 bb       	out	0x12, r25	; 18
				break;
 192:	59 c0       	rjmp	.+178    	; 0x246 <motor_make_step+0xfe>
			case 3:
				M0_STEP3;
 194:	92 b3       	in	r25, 0x12	; 18
 196:	90 66       	ori	r25, 0x60	; 96
 198:	92 bb       	out	0x12, r25	; 18
 19a:	92 b3       	in	r25, 0x12	; 18
 19c:	9f 76       	andi	r25, 0x6F	; 111
 19e:	f8 cf       	rjmp	.-16     	; 0x190 <motor_make_step+0x48>
				break;
			case 4:
				M0_STEP4;
 1a0:	96 9a       	sbi	0x12, 6	; 18
 1a2:	92 b3       	in	r25, 0x12	; 18
 1a4:	9f 74       	andi	r25, 0x4F	; 79
 1a6:	f4 cf       	rjmp	.-24     	; 0x190 <motor_make_step+0x48>
				break;
			case 5:
				M0_STEP5;
 1a8:	92 b3       	in	r25, 0x12	; 18
 1aa:	90 6c       	ori	r25, 0xC0	; 192
 1ac:	92 bb       	out	0x12, r25	; 18
 1ae:	92 b3       	in	r25, 0x12	; 18
 1b0:	9f 7c       	andi	r25, 0xCF	; 207
 1b2:	ee cf       	rjmp	.-36     	; 0x190 <motor_make_step+0x48>
				break;
			case 6:
				M0_STEP6;
 1b4:	97 9a       	sbi	0x12, 7	; 18
 1b6:	92 b3       	in	r25, 0x12	; 18
 1b8:	9f 78       	andi	r25, 0x8F	; 143
 1ba:	ea cf       	rjmp	.-44     	; 0x190 <motor_make_step+0x48>
				break;
			case 7:
				M0_STEP7;
 1bc:	92 b3       	in	r25, 0x12	; 18
 1be:	90 69       	ori	r25, 0x90	; 144
 1c0:	92 bb       	out	0x12, r25	; 18
 1c2:	92 b3       	in	r25, 0x12	; 18
 1c4:	9f 79       	andi	r25, 0x9F	; 159
 1c6:	e4 cf       	rjmp	.-56     	; 0x190 <motor_make_step+0x48>
				break;
			case 8:
				M0_STEP8;
 1c8:	94 9a       	sbi	0x12, 4	; 18
 1ca:	92 b3       	in	r25, 0x12	; 18
 1cc:	9f 71       	andi	r25, 0x1F	; 31
 1ce:	e0 cf       	rjmp	.-64     	; 0x190 <motor_make_step+0x48>
				break;
		}
	} else if (motor==1) {
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	c9 f5       	brne	.+114    	; 0x246 <motor_make_step+0xfe>
		switch(step) {
 1d4:	65 30       	cpi	r22, 0x05	; 5
 1d6:	19 f1       	breq	.+70     	; 0x21e <motor_make_step+0xd6>
 1d8:	66 30       	cpi	r22, 0x06	; 6
 1da:	38 f4       	brcc	.+14     	; 0x1ea <motor_make_step+0xa2>
 1dc:	63 30       	cpi	r22, 0x03	; 3
 1de:	a9 f0       	breq	.+42     	; 0x20a <motor_make_step+0xc2>
 1e0:	64 30       	cpi	r22, 0x04	; 4
 1e2:	c8 f4       	brcc	.+50     	; 0x216 <motor_make_step+0xce>
 1e4:	62 30       	cpi	r22, 0x02	; 2
 1e6:	39 f4       	brne	.+14     	; 0x1f6 <motor_make_step+0xae>
 1e8:	0c c0       	rjmp	.+24     	; 0x202 <motor_make_step+0xba>
 1ea:	67 30       	cpi	r22, 0x07	; 7
 1ec:	11 f1       	breq	.+68     	; 0x232 <motor_make_step+0xea>
 1ee:	67 30       	cpi	r22, 0x07	; 7
 1f0:	e0 f0       	brcs	.+56     	; 0x22a <motor_make_step+0xe2>
 1f2:	68 30       	cpi	r22, 0x08	; 8
 1f4:	21 f1       	breq	.+72     	; 0x23e <motor_make_step+0xf6>
			case 1:
				M1_STEP1;
 1f6:	95 b3       	in	r25, 0x15	; 21
 1f8:	94 62       	ori	r25, 0x24	; 36
 1fa:	95 bb       	out	0x15, r25	; 21
 1fc:	95 b3       	in	r25, 0x15	; 21
 1fe:	97 7e       	andi	r25, 0xE7	; 231
 200:	21 c0       	rjmp	.+66     	; 0x244 <motor_make_step+0xfc>
				break;
			case 2:
				M1_STEP2;
 202:	aa 9a       	sbi	0x15, 2	; 21
 204:	95 b3       	in	r25, 0x15	; 21
 206:	97 7c       	andi	r25, 0xC7	; 199
 208:	1d c0       	rjmp	.+58     	; 0x244 <motor_make_step+0xfc>
				break;
			case 3:
				M1_STEP3;
 20a:	95 b3       	in	r25, 0x15	; 21
 20c:	94 61       	ori	r25, 0x14	; 20
 20e:	95 bb       	out	0x15, r25	; 21
 210:	95 b3       	in	r25, 0x15	; 21
 212:	97 7d       	andi	r25, 0xD7	; 215
 214:	17 c0       	rjmp	.+46     	; 0x244 <motor_make_step+0xfc>
				break;
			case 4:
				M1_STEP4;
 216:	ac 9a       	sbi	0x15, 4	; 21
 218:	95 b3       	in	r25, 0x15	; 21
 21a:	93 7d       	andi	r25, 0xD3	; 211
 21c:	13 c0       	rjmp	.+38     	; 0x244 <motor_make_step+0xfc>
				break;
			case 5:
				M1_STEP5;
 21e:	95 b3       	in	r25, 0x15	; 21
 220:	98 61       	ori	r25, 0x18	; 24
 222:	95 bb       	out	0x15, r25	; 21
 224:	95 b3       	in	r25, 0x15	; 21
 226:	9b 7d       	andi	r25, 0xDB	; 219
 228:	0d c0       	rjmp	.+26     	; 0x244 <motor_make_step+0xfc>
				break;
			case 6:
				M1_STEP6;
 22a:	ab 9a       	sbi	0x15, 3	; 21
 22c:	95 b3       	in	r25, 0x15	; 21
 22e:	9b 7c       	andi	r25, 0xCB	; 203
 230:	09 c0       	rjmp	.+18     	; 0x244 <motor_make_step+0xfc>
				break;
			case 7:
				M1_STEP7;
 232:	95 b3       	in	r25, 0x15	; 21
 234:	98 62       	ori	r25, 0x28	; 40
 236:	95 bb       	out	0x15, r25	; 21
 238:	95 b3       	in	r25, 0x15	; 21
 23a:	9b 7e       	andi	r25, 0xEB	; 235
 23c:	03 c0       	rjmp	.+6      	; 0x244 <motor_make_step+0xfc>
				break;
			case 8:
				M1_STEP8;
 23e:	ad 9a       	sbi	0x15, 5	; 21
 240:	95 b3       	in	r25, 0x15	; 21
 242:	93 7e       	andi	r25, 0xE3	; 227
 244:	95 bb       	out	0x15, r25	; 21
				break;
		}
	}
	motor_current_step[motor] = step;
 246:	e8 2f       	mov	r30, r24
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	e0 5a       	subi	r30, 0xA0	; 160
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	60 83       	st	Z, r22
}
 250:	08 95       	ret

00000252 <motor_move>:

/*
 * Move servo in particular directory by requesting step change
 */
void motor_move(uint8_t motor, uint8_t dir) {
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	08 2f       	mov	r16, r24
 258:	16 2f       	mov	r17, r22
 25a:	28 2f       	mov	r18, r24
 25c:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t next_step = (dir==1) ? motor_current_step[motor]+1 : motor_current_step[motor]-1;		// 0-8
 25e:	61 30       	cpi	r22, 0x01	; 1
 260:	31 f4       	brne	.+12     	; 0x26e <motor_move+0x1c>
 262:	20 5a       	subi	r18, 0xA0	; 160
 264:	3f 4f       	sbci	r19, 0xFF	; 255
 266:	f9 01       	movw	r30, r18
 268:	60 81       	ld	r22, Z
 26a:	6f 5f       	subi	r22, 0xFF	; 255
 26c:	05 c0       	rjmp	.+10     	; 0x278 <motor_move+0x26>
 26e:	20 5a       	subi	r18, 0xA0	; 160
 270:	3f 4f       	sbci	r19, 0xFF	; 255
 272:	f9 01       	movw	r30, r18
 274:	60 81       	ld	r22, Z
 276:	61 50       	subi	r22, 0x01	; 1
	motor_make_step(motor, next_step);
 278:	80 2f       	mov	r24, r16
 27a:	66 df       	rcall	.-308    	; 0x148 <motor_make_step>
	if (motor==0) {
 27c:	00 23       	and	r16, r16
 27e:	51 f5       	brne	.+84     	; 0x2d4 <motor_move+0x82>
		if (dir==0 && motor_pos[0]==M0_POS_MIN) {
 280:	11 23       	and	r17, r17
 282:	49 f4       	brne	.+18     	; 0x296 <motor_move+0x44>
 284:	80 91 62 00 	lds	r24, 0x0062
 288:	90 91 63 00 	lds	r25, 0x0063
 28c:	00 97       	sbiw	r24, 0x00	; 0
 28e:	c1 f4       	brne	.+48     	; 0x2c0 <motor_move+0x6e>
			motor_pos[0] = M0_POS_MAX;
 290:	80 e9       	ldi	r24, 0x90	; 144
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	1a c0       	rjmp	.+52     	; 0x2ca <motor_move+0x78>
		} else if (dir==1 && motor_pos[0]==M0_POS_MAX) {
 296:	11 30       	cpi	r17, 0x01	; 1
 298:	99 f4       	brne	.+38     	; 0x2c0 <motor_move+0x6e>
 29a:	80 91 62 00 	lds	r24, 0x0062
 29e:	90 91 63 00 	lds	r25, 0x0063
 2a2:	f1 e0       	ldi	r31, 0x01	; 1
 2a4:	80 39       	cpi	r24, 0x90	; 144
 2a6:	9f 07       	cpc	r25, r31
 2a8:	29 f4       	brne	.+10     	; 0x2b4 <motor_move+0x62>
			motor_pos[0] = M0_POS_MIN;
 2aa:	10 92 63 00 	sts	0x0063, r1
 2ae:	10 92 62 00 	sts	0x0062, r1
 2b2:	25 c0       	rjmp	.+74     	; 0x2fe <motor_move+0xac>
		} else {
			motor_pos[0] = (dir==1) ? motor_pos[0]+1 : motor_pos[0]-1;
 2b4:	80 91 62 00 	lds	r24, 0x0062
 2b8:	90 91 63 00 	lds	r25, 0x0063
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	05 c0       	rjmp	.+10     	; 0x2ca <motor_move+0x78>
 2c0:	80 91 62 00 	lds	r24, 0x0062
 2c4:	90 91 63 00 	lds	r25, 0x0063
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	90 93 63 00 	sts	0x0063, r25
 2ce:	80 93 62 00 	sts	0x0062, r24
 2d2:	15 c0       	rjmp	.+42     	; 0x2fe <motor_move+0xac>
		}
	} else if (motor==1) {
 2d4:	01 30       	cpi	r16, 0x01	; 1
 2d6:	99 f4       	brne	.+38     	; 0x2fe <motor_move+0xac>
		if (dir==0) {
 2d8:	11 23       	and	r17, r17
 2da:	31 f4       	brne	.+12     	; 0x2e8 <motor_move+0x96>
			motor_pos[1]--;
 2dc:	80 91 64 00 	lds	r24, 0x0064
 2e0:	90 91 65 00 	lds	r25, 0x0065
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	07 c0       	rjmp	.+14     	; 0x2f6 <motor_move+0xa4>
		} else if (dir==1) {
 2e8:	11 30       	cpi	r17, 0x01	; 1
 2ea:	49 f4       	brne	.+18     	; 0x2fe <motor_move+0xac>
			motor_pos[1]++;
 2ec:	80 91 64 00 	lds	r24, 0x0064
 2f0:	90 91 65 00 	lds	r25, 0x0065
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	90 93 65 00 	sts	0x0065, r25
 2fa:	80 93 64 00 	sts	0x0064, r24
		}
	}
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	08 95       	ret

00000304 <__vector_9>:
}

/*
 * Timer0 interrupt handler
 */
ISR(TIMER0_OVF_vect) {
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	2f 93       	push	r18
 310:	3f 93       	push	r19
 312:	4f 93       	push	r20
 314:	5f 93       	push	r21
 316:	6f 93       	push	r22
 318:	7f 93       	push	r23
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
 31e:	af 93       	push	r26
 320:	bf 93       	push	r27
 322:	ef 93       	push	r30
 324:	ff 93       	push	r31
	if (stepper_flag[0] > (255 - motor_speed[0])) {
 326:	20 91 76 00 	lds	r18, 0x0076
 32a:	40 91 66 00 	lds	r20, 0x0066
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	84 1b       	sub	r24, r20
 336:	91 09       	sbc	r25, r1
 338:	82 17       	cp	r24, r18
 33a:	93 07       	cpc	r25, r19
 33c:	1c f4       	brge	.+6      	; 0x344 <__vector_9+0x40>
		stepper_flag[0] = 0;
 33e:	10 92 76 00 	sts	0x0076, r1
 342:	05 c0       	rjmp	.+10     	; 0x34e <__vector_9+0x4a>
	} else {
		stepper_flag[0]++;
 344:	80 91 76 00 	lds	r24, 0x0076
 348:	8f 5f       	subi	r24, 0xFF	; 255
 34a:	80 93 76 00 	sts	0x0076, r24
	}
	if (stepper_flag[1] > (255 - motor_speed[1])) {
 34e:	20 91 77 00 	lds	r18, 0x0077
 352:	40 91 67 00 	lds	r20, 0x0067
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	84 1b       	sub	r24, r20
 35e:	91 09       	sbc	r25, r1
 360:	82 17       	cp	r24, r18
 362:	93 07       	cpc	r25, r19
 364:	1c f4       	brge	.+6      	; 0x36c <__vector_9+0x68>
		stepper_flag[1] = 0;
 366:	10 92 77 00 	sts	0x0077, r1
 36a:	05 c0       	rjmp	.+10     	; 0x376 <__vector_9+0x72>
	} else {
		stepper_flag[1]++;
 36c:	80 91 77 00 	lds	r24, 0x0077
 370:	8f 5f       	subi	r24, 0xFF	; 255
 372:	80 93 77 00 	sts	0x0077, r24
	}

	if (stepper_flag[0] == 0) {
 376:	80 91 76 00 	lds	r24, 0x0076
 37a:	88 23       	and	r24, r24
 37c:	11 f4       	brne	.+4      	; 0x382 <__vector_9+0x7e>
		if (1 || btn_state[0]==BTN_L) {
			motor_move(0,0);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	68 df       	rcall	.-304    	; 0x252 <motor_move>
		} else if (btn_state[0]==BTN_R) {
			motor_move(0,1);
		}
	}
	if (stepper_flag[1] == 0) {
 382:	80 91 77 00 	lds	r24, 0x0077
 386:	88 23       	and	r24, r24
 388:	19 f4       	brne	.+6      	; 0x390 <__vector_9+0x8c>
		if (1 || btn_state[3]==BTN_L) {
			motor_move(1,0);
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	61 df       	rcall	.-318    	; 0x252 <motor_move>
		} else if (btn_state[3]==BTN_R) {
			motor_move(1,1);
		}
	}
}
 390:	ff 91       	pop	r31
 392:	ef 91       	pop	r30
 394:	bf 91       	pop	r27
 396:	af 91       	pop	r26
 398:	9f 91       	pop	r25
 39a:	8f 91       	pop	r24
 39c:	7f 91       	pop	r23
 39e:	6f 91       	pop	r22
 3a0:	5f 91       	pop	r21
 3a2:	4f 91       	pop	r20
 3a4:	3f 91       	pop	r19
 3a6:	2f 91       	pop	r18
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <_exit>:
 3b2:	f8 94       	cli

000003b4 <__stop_program>:
 3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <__stop_program>
