
atmega_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000378  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800066  00800066  00000412  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000135  00000000  00000000  00000b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000321  00000000  00000000  00000cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000113  00000000  00000000  00000fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000404  00000000  00000000  000010ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b0  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000184  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000078  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000002b  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	5d c1       	rjmp	.+698    	; 0x2ce <__vector_9>
  14:	53 c0       	rjmp	.+166    	; 0xbc <__vector_10>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	79 c0       	rjmp	.+242    	; 0x110 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e7       	ldi	r30, 0x78	; 120
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 37       	cpi	r26, 0x79	; 121
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	6e d0       	rcall	.+220    	; 0x136 <main>
  5a:	8c c1       	rjmp	.+792    	; 0x374 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <motor_ports_init>:

/*
 * Initialize ports for stepping motors outputs
 */
void motor_ports_init(void) {
	DDRD |= MOTOR_PD;
  5e:	81 b3       	in	r24, 0x11	; 17
  60:	80 6f       	ori	r24, 0xF0	; 240
  62:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(MOTOR_PD);
  64:	82 b3       	in	r24, 0x12	; 18
  66:	8f 70       	andi	r24, 0x0F	; 15
  68:	82 bb       	out	0x12, r24	; 18
	DDRC |= MOTOR_PC;
  6a:	84 b3       	in	r24, 0x14	; 20
  6c:	8c 63       	ori	r24, 0x3C	; 60
  6e:	84 bb       	out	0x14, r24	; 20
	PORTD &= ~(MOTOR_PC);
  70:	82 b3       	in	r24, 0x12	; 18
  72:	83 7c       	andi	r24, 0xC3	; 195
  74:	82 bb       	out	0x12, r24	; 18
	// set ports to default STEP1
	M0_STEP1;
  76:	82 b3       	in	r24, 0x12	; 18
  78:	80 63       	ori	r24, 0x30	; 48
  7a:	82 bb       	out	0x12, r24	; 18
  7c:	82 b3       	in	r24, 0x12	; 18
  7e:	8f 73       	andi	r24, 0x3F	; 63
  80:	82 bb       	out	0x12, r24	; 18
	M1_STEP1;
  82:	85 b3       	in	r24, 0x15	; 21
  84:	88 61       	ori	r24, 0x18	; 24
  86:	85 bb       	out	0x15, r24	; 21
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	8b 7d       	andi	r24, 0xDB	; 219
  8c:	85 bb       	out	0x15, r24	; 21
}
  8e:	08 95       	ret

00000090 <ADC_init>:

/*
 * Analog-Digital-Converter interface initialization
 */
void ADC_init(void) {
	ADMUX |= (1<<REFS0)|(1<<REFS1);								// 2,56V
  90:	87 b1       	in	r24, 0x07	; 7
  92:	80 6c       	ori	r24, 0xC0	; 192
  94:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<ADLAR);										// ADCH only
  96:	3d 9a       	sbi	0x07, 5	; 7
																// ADC0 by default
	ADCSRA |= (1<<ADIE);										// ADC interrupt flag
  98:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA |= (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);		// prescaler 128
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	87 68       	ori	r24, 0x87	; 135
  9e:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADSC);										// initial measurement
  a0:	36 9a       	sbi	0x06, 6	; 6
}
  a2:	08 95       	ret

000000a4 <SPI_init>:

/*
 * SPI transfer interface initialization
 */
void SPI_init(void) {
	DDRB |= MISO;
  a4:	bc 9a       	sbi	0x17, 4	; 23
	SPCR |= (1<<SPIE)|(1<<SPE);
  a6:	8d b1       	in	r24, 0x0d	; 13
  a8:	80 6c       	ori	r24, 0xC0	; 192
  aa:	8d b9       	out	0x0d, r24	; 13
}
  ac:	08 95       	ret

000000ae <Timer0_init>:

/*
 * Initialize Timer0 for switching steps on stepping motors
 */
void Timer0_init(void) {
	TCCR0 |= (1<<CS00);							// no prescaler
  ae:	83 b7       	in	r24, 0x33	; 51
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);						// overflow IRQ
  b4:	89 b7       	in	r24, 0x39	; 57
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	89 bf       	out	0x39, r24	; 57
}
  ba:	08 95       	ret

000000bc <__vector_10>:

/*
 * SPI interrupt handle
 * - r/w
 */
ISR(SPI_STC_vect) {
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	btn_state[j] = SPDR;
  cc:	e0 91 75 00 	lds	r30, 0x0075
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	8f b1       	in	r24, 0x0f	; 15
  d4:	e1 59       	subi	r30, 0x91	; 145
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	80 83       	st	Z, r24
	if(j<5) {
  da:	80 91 75 00 	lds	r24, 0x0075
  de:	85 30       	cpi	r24, 0x05	; 5
  e0:	30 f4       	brcc	.+12     	; 0xee <__vector_10+0x32>
		j++;
  e2:	80 91 75 00 	lds	r24, 0x0075
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 75 00 	sts	0x0075, r24
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__vector_10+0x36>
	} else {
		j = 0;
  ee:	10 92 75 00 	sts	0x0075, r1
	}
	SPDR = drive_state[j];
  f2:	e0 91 75 00 	lds	r30, 0x0075
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	e7 59       	subi	r30, 0x97	; 151
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	80 81       	ld	r24, Z
  fe:	8f b9       	out	0x0f, r24	; 15
}
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <__vector_14>:
/*
 * ADC interrupt handler
 * - take value as raw 8bit reading
 * - update SPI data of speed
 */
ISR(ADC_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
	// 0 - 255
	set_speed = drive_state[5] = ADCH;
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	80 93 6e 00 	sts	0x006E, r24
 122:	80 91 6e 00 	lds	r24, 0x006E
 126:	80 93 66 00 	sts	0x0066, r24
}
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <main>:

/************************************************* MAIN *************************************************/
int main(void)
{
	motor_ports_init();
 136:	93 df       	rcall	.-218    	; 0x5e <motor_ports_init>
	Timer0_init();
 138:	ba df       	rcall	.-140    	; 0xae <Timer0_init>
	SPI_init();
 13a:	b4 df       	rcall	.-152    	; 0xa4 <SPI_init>
	ADC_init();
 13c:	a9 df       	rcall	.-174    	; 0x90 <ADC_init>
	sei();
 13e:	78 94       	sei
				motor_speed[0] = M0_SPD_L;
			} else {
				motor_speed[0] = set_speed;
			}
			if (set_speed > M1_SPD_H) {
				motor_speed[1] = M1_SPD_H;
 140:	8b e9       	ldi	r24, 0x9B	; 155
	SPI_init();
	ADC_init();
	sei();
	while(1)
	{
		if (btn_get_flag==BTN_GET_ON) {
 142:	90 91 76 00 	lds	r25, 0x0076
 146:	94 30       	cpi	r25, 0x04	; 4
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0xc>
			//drive_state[1] = (servo_pos_raw[1] - SERVO_MIN+50) / SERVO_STEPS_PER_DEG;		// +50 dla wyrównania 0 stopni
			//drive_state[2] = motor_pos[1] / M1_RATIO;																					// TEMP: dzielenie zamiast mno¿enia!
			//drive_state[3] = (servo_pos_raw[2] - SERVO_MIN+50) / SERVO_STEPS_PER_DEG;

			// measure value for speed
			ADCSRA |= (1<<ADSC);
 14a:	36 9a       	sbi	0x06, 6	; 6

			// set motors speed
			if (set_speed > M0_SPD_H) {
 14c:	90 91 66 00 	lds	r25, 0x0066
 150:	9c 39       	cpi	r25, 0x9C	; 156
 152:	18 f0       	brcs	.+6      	; 0x15a <main+0x24>
				motor_speed[0] = M0_SPD_H;
 154:	80 93 67 00 	sts	0x0067, r24
 158:	06 c0       	rjmp	.+12     	; 0x166 <main+0x30>
			} else if (set_speed < M0_SPD_L) {
 15a:	90 91 66 00 	lds	r25, 0x0066
				motor_speed[0] = M0_SPD_L;
			} else {
				motor_speed[0] = set_speed;
 15e:	90 91 66 00 	lds	r25, 0x0066
 162:	90 93 67 00 	sts	0x0067, r25
			}
			if (set_speed > M1_SPD_H) {
 166:	90 91 66 00 	lds	r25, 0x0066
 16a:	9c 39       	cpi	r25, 0x9C	; 156
 16c:	18 f0       	brcs	.+6      	; 0x174 <main+0x3e>
				motor_speed[1] = M1_SPD_H;
 16e:	80 93 68 00 	sts	0x0068, r24
 172:	06 c0       	rjmp	.+12     	; 0x180 <main+0x4a>
			} else if (set_speed < M1_SPD_L) {
 174:	90 91 66 00 	lds	r25, 0x0066
				motor_speed[1] = M1_SPD_L;
			} else {
				motor_speed[1] = set_speed;
 178:	90 91 66 00 	lds	r25, 0x0066
 17c:	90 93 68 00 	sts	0x0068, r25
			}

			// clear button flag
			btn_get_flag = 0;
 180:	10 92 76 00 	sts	0x0076, r1
 184:	de cf       	rjmp	.-68     	; 0x142 <main+0xc>

00000186 <motor_make_step>:

/*
 *	Toggle ports states to switch coil set - make step
 */
void motor_make_step(uint8_t motor, uint8_t step) {
	if (step>4) {
 186:	65 30       	cpi	r22, 0x05	; 5
 188:	18 f4       	brcc	.+6      	; 0x190 <motor_make_step+0xa>
		step = 1;
	} else if (step<1) {
 18a:	66 23       	and	r22, r22
 18c:	19 f0       	breq	.+6      	; 0x194 <motor_make_step+0xe>
 18e:	03 c0       	rjmp	.+6      	; 0x196 <motor_make_step+0x10>
/*
 *	Toggle ports states to switch coil set - make step
 */
void motor_make_step(uint8_t motor, uint8_t step) {
	if (step>4) {
		step = 1;
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	01 c0       	rjmp	.+2      	; 0x196 <motor_make_step+0x10>
	} else if (step<1) {
		step = 4;
 194:	64 e0       	ldi	r22, 0x04	; 4
	}
	if (motor==0) {
 196:	88 23       	and	r24, r24
 198:	d9 f4       	brne	.+54     	; 0x1d0 <motor_make_step+0x4a>
		switch(step) {
 19a:	63 30       	cpi	r22, 0x03	; 3
 19c:	71 f0       	breq	.+28     	; 0x1ba <motor_make_step+0x34>
 19e:	64 30       	cpi	r22, 0x04	; 4
 1a0:	99 f0       	breq	.+38     	; 0x1c8 <motor_make_step+0x42>
 1a2:	62 30       	cpi	r22, 0x02	; 2
 1a4:	31 f0       	breq	.+12     	; 0x1b2 <motor_make_step+0x2c>
			case 1:
				M0_STEP1;
 1a6:	92 b3       	in	r25, 0x12	; 18
 1a8:	90 63       	ori	r25, 0x30	; 48
 1aa:	92 bb       	out	0x12, r25	; 18
 1ac:	92 b3       	in	r25, 0x12	; 18
 1ae:	9f 73       	andi	r25, 0x3F	; 63
 1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <motor_make_step+0x3e>
				break;
			case 2:
				M0_STEP2;
 1b2:	95 9a       	sbi	0x12, 5	; 18
 1b4:	92 b3       	in	r25, 0x12	; 18
 1b6:	9f 72       	andi	r25, 0x2F	; 47
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <motor_make_step+0x3e>
				break;
			case 3:
				M0_STEP3;
 1ba:	92 b3       	in	r25, 0x12	; 18
 1bc:	90 66       	ori	r25, 0x60	; 96
 1be:	92 bb       	out	0x12, r25	; 18
 1c0:	92 b3       	in	r25, 0x12	; 18
 1c2:	9f 76       	andi	r25, 0x6F	; 111
 1c4:	92 bb       	out	0x12, r25	; 18
				break;
 1c6:	24 c0       	rjmp	.+72     	; 0x210 <motor_make_step+0x8a>
			case 4:
				M0_STEP4;
 1c8:	96 9a       	sbi	0x12, 6	; 18
 1ca:	92 b3       	in	r25, 0x12	; 18
 1cc:	9f 74       	andi	r25, 0x4F	; 79
 1ce:	fa cf       	rjmp	.-12     	; 0x1c4 <motor_make_step+0x3e>
				break;
			case 8:
				M0_STEP8;
				break;
		}
	} else if (motor==1) {
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	f1 f4       	brne	.+60     	; 0x210 <motor_make_step+0x8a>
		switch(step) {
 1d4:	63 30       	cpi	r22, 0x03	; 3
 1d6:	81 f0       	breq	.+32     	; 0x1f8 <motor_make_step+0x72>
 1d8:	64 30       	cpi	r22, 0x04	; 4
 1da:	a1 f0       	breq	.+40     	; 0x204 <motor_make_step+0x7e>
 1dc:	62 30       	cpi	r22, 0x02	; 2
 1de:	31 f0       	breq	.+12     	; 0x1ec <motor_make_step+0x66>
			case 1:
				M1_STEP1;
 1e0:	95 b3       	in	r25, 0x15	; 21
 1e2:	98 61       	ori	r25, 0x18	; 24
 1e4:	95 bb       	out	0x15, r25	; 21
 1e6:	95 b3       	in	r25, 0x15	; 21
 1e8:	9b 7d       	andi	r25, 0xDB	; 219
 1ea:	11 c0       	rjmp	.+34     	; 0x20e <motor_make_step+0x88>
				break;
			case 2:
				M1_STEP2;
 1ec:	95 b3       	in	r25, 0x15	; 21
 1ee:	9c 60       	ori	r25, 0x0C	; 12
 1f0:	95 bb       	out	0x15, r25	; 21
 1f2:	95 b3       	in	r25, 0x15	; 21
 1f4:	9f 7c       	andi	r25, 0xCF	; 207
 1f6:	0b c0       	rjmp	.+22     	; 0x20e <motor_make_step+0x88>
				break;
			case 3:
				M1_STEP3;
 1f8:	95 b3       	in	r25, 0x15	; 21
 1fa:	94 62       	ori	r25, 0x24	; 36
 1fc:	95 bb       	out	0x15, r25	; 21
 1fe:	95 b3       	in	r25, 0x15	; 21
 200:	97 7e       	andi	r25, 0xE7	; 231
 202:	05 c0       	rjmp	.+10     	; 0x20e <motor_make_step+0x88>
				break;
			case 4:
				M1_STEP4;
 204:	95 b3       	in	r25, 0x15	; 21
 206:	90 63       	ori	r25, 0x30	; 48
 208:	95 bb       	out	0x15, r25	; 21
 20a:	95 b3       	in	r25, 0x15	; 21
 20c:	93 7f       	andi	r25, 0xF3	; 243
 20e:	95 bb       	out	0x15, r25	; 21
			case 8:
				//M1_STEP8;
				break;
		}
	}
	motor_current_step[motor] = step;
 210:	e8 2f       	mov	r30, r24
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	e0 5a       	subi	r30, 0xA0	; 160
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	60 83       	st	Z, r22
}
 21a:	08 95       	ret

0000021c <motor_move>:

/*
 * Move servo in particular directory by requesting step change
 */
void motor_move(uint8_t motor, uint8_t dir) {
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	08 2f       	mov	r16, r24
 222:	16 2f       	mov	r17, r22
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t next_step = (dir==1) ? motor_current_step[motor]+1 : motor_current_step[motor]-1;		// 0-8
 228:	61 30       	cpi	r22, 0x01	; 1
 22a:	31 f4       	brne	.+12     	; 0x238 <motor_move+0x1c>
 22c:	20 5a       	subi	r18, 0xA0	; 160
 22e:	3f 4f       	sbci	r19, 0xFF	; 255
 230:	f9 01       	movw	r30, r18
 232:	60 81       	ld	r22, Z
 234:	6f 5f       	subi	r22, 0xFF	; 255
 236:	05 c0       	rjmp	.+10     	; 0x242 <motor_move+0x26>
 238:	20 5a       	subi	r18, 0xA0	; 160
 23a:	3f 4f       	sbci	r19, 0xFF	; 255
 23c:	f9 01       	movw	r30, r18
 23e:	60 81       	ld	r22, Z
 240:	61 50       	subi	r22, 0x01	; 1
	motor_make_step(motor, next_step);
 242:	80 2f       	mov	r24, r16
 244:	a0 df       	rcall	.-192    	; 0x186 <motor_make_step>
	if (motor==0) {
 246:	00 23       	and	r16, r16
 248:	51 f5       	brne	.+84     	; 0x29e <motor_move+0x82>
		if (dir==0 && motor_pos[0]==M0_POS_MIN) {
 24a:	11 23       	and	r17, r17
 24c:	49 f4       	brne	.+18     	; 0x260 <motor_move+0x44>
 24e:	80 91 62 00 	lds	r24, 0x0062
 252:	90 91 63 00 	lds	r25, 0x0063
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	c1 f4       	brne	.+48     	; 0x28a <motor_move+0x6e>
			motor_pos[0] = M0_POS_MAX;
 25a:	80 e9       	ldi	r24, 0x90	; 144
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	1a c0       	rjmp	.+52     	; 0x294 <motor_move+0x78>
		} else if (dir==1 && motor_pos[0]==M0_POS_MAX) {
 260:	11 30       	cpi	r17, 0x01	; 1
 262:	99 f4       	brne	.+38     	; 0x28a <motor_move+0x6e>
 264:	80 91 62 00 	lds	r24, 0x0062
 268:	90 91 63 00 	lds	r25, 0x0063
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	80 39       	cpi	r24, 0x90	; 144
 270:	9f 07       	cpc	r25, r31
 272:	29 f4       	brne	.+10     	; 0x27e <motor_move+0x62>
			motor_pos[0] = M0_POS_MIN;
 274:	10 92 63 00 	sts	0x0063, r1
 278:	10 92 62 00 	sts	0x0062, r1
 27c:	25 c0       	rjmp	.+74     	; 0x2c8 <motor_move+0xac>
		} else {
			motor_pos[0] = (dir==1) ? motor_pos[0]+1 : motor_pos[0]-1;
 27e:	80 91 62 00 	lds	r24, 0x0062
 282:	90 91 63 00 	lds	r25, 0x0063
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	05 c0       	rjmp	.+10     	; 0x294 <motor_move+0x78>
 28a:	80 91 62 00 	lds	r24, 0x0062
 28e:	90 91 63 00 	lds	r25, 0x0063
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	90 93 63 00 	sts	0x0063, r25
 298:	80 93 62 00 	sts	0x0062, r24
 29c:	15 c0       	rjmp	.+42     	; 0x2c8 <motor_move+0xac>
		}
	} else if (motor==1) {
 29e:	01 30       	cpi	r16, 0x01	; 1
 2a0:	99 f4       	brne	.+38     	; 0x2c8 <motor_move+0xac>
		if (dir==0) {
 2a2:	11 23       	and	r17, r17
 2a4:	31 f4       	brne	.+12     	; 0x2b2 <motor_move+0x96>
			motor_pos[1]--;
 2a6:	80 91 64 00 	lds	r24, 0x0064
 2aa:	90 91 65 00 	lds	r25, 0x0065
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	07 c0       	rjmp	.+14     	; 0x2c0 <motor_move+0xa4>
		} else if (dir==1) {
 2b2:	11 30       	cpi	r17, 0x01	; 1
 2b4:	49 f4       	brne	.+18     	; 0x2c8 <motor_move+0xac>
			motor_pos[1]++;
 2b6:	80 91 64 00 	lds	r24, 0x0064
 2ba:	90 91 65 00 	lds	r25, 0x0065
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	90 93 65 00 	sts	0x0065, r25
 2c4:	80 93 64 00 	sts	0x0064, r24
		}
	}
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	08 95       	ret

000002ce <__vector_9>:
}

/*
 * Timer0 interrupt handler
 */
ISR(TIMER0_OVF_vect) {
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	2f 93       	push	r18
 2da:	3f 93       	push	r19
 2dc:	4f 93       	push	r20
 2de:	5f 93       	push	r21
 2e0:	6f 93       	push	r22
 2e2:	7f 93       	push	r23
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
 2e8:	af 93       	push	r26
 2ea:	bf 93       	push	r27
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
	if (stepper_flag[0] > (255 - motor_speed[0])) {
 2f0:	20 91 77 00 	lds	r18, 0x0077
 2f4:	40 91 67 00 	lds	r20, 0x0067
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	84 1b       	sub	r24, r20
 300:	91 09       	sbc	r25, r1
 302:	82 17       	cp	r24, r18
 304:	93 07       	cpc	r25, r19
 306:	1c f4       	brge	.+6      	; 0x30e <__vector_9+0x40>
		stepper_flag[0] = 0;
 308:	10 92 77 00 	sts	0x0077, r1
 30c:	05 c0       	rjmp	.+10     	; 0x318 <__vector_9+0x4a>
	} else {
		stepper_flag[0]++;
 30e:	80 91 77 00 	lds	r24, 0x0077
 312:	8f 5f       	subi	r24, 0xFF	; 255
 314:	80 93 77 00 	sts	0x0077, r24
	}
	if (stepper_flag[1] > (255 - motor_speed[1])) {
 318:	20 91 78 00 	lds	r18, 0x0078
 31c:	40 91 68 00 	lds	r20, 0x0068
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	84 1b       	sub	r24, r20
 328:	91 09       	sbc	r25, r1
 32a:	82 17       	cp	r24, r18
 32c:	93 07       	cpc	r25, r19
 32e:	1c f4       	brge	.+6      	; 0x336 <__vector_9+0x68>
		stepper_flag[1] = 0;
 330:	10 92 78 00 	sts	0x0078, r1
 334:	05 c0       	rjmp	.+10     	; 0x340 <__vector_9+0x72>
	} else {
		stepper_flag[1]++;
 336:	80 91 78 00 	lds	r24, 0x0078
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	80 93 78 00 	sts	0x0078, r24
	}

	if (stepper_flag[0] == 0) {
 340:	80 91 77 00 	lds	r24, 0x0077
			//motor_move(0,0);
		} else if (btn_state[0]==BTN_R) {
			//motor_move(0,1);
		}
	}
	if (stepper_flag[1] == 0) {
 344:	80 91 78 00 	lds	r24, 0x0078
 348:	88 23       	and	r24, r24
 34a:	19 f4       	brne	.+6      	; 0x352 <__vector_9+0x84>
		if (1 || btn_state[3]==BTN_L) {
			motor_move(1,0);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	65 df       	rcall	.-310    	; 0x21c <motor_move>
		} else if (btn_state[3]==BTN_R) {
			//motor_move(1,1);
		}
	}
}
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	7f 91       	pop	r23
 360:	6f 91       	pop	r22
 362:	5f 91       	pop	r21
 364:	4f 91       	pop	r20
 366:	3f 91       	pop	r19
 368:	2f 91       	pop	r18
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
