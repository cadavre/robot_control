
atmega_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000003c8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800066  00800066  00000462  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000185  00000000  00000000  00000bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003a6  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000139  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000474  00000000  00000000  00001239  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b0  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001c0  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000078  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000002b  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	86 c1       	rjmp	.+780    	; 0x320 <__vector_9>
  14:	53 c0       	rjmp	.+166    	; 0xbc <__vector_10>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	79 c0       	rjmp	.+242    	; 0x110 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ec       	ldi	r30, 0xC8	; 200
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 37       	cpi	r26, 0x7F	; 127
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	6e d0       	rcall	.+220    	; 0x136 <main>
  5a:	b4 c1       	rjmp	.+872    	; 0x3c4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <motor_ports_init>:

/*
 * Initialize ports for stepping motors outputs
 */
void motor_ports_init(void) {
	DDRD |= MOTOR_PD;
  5e:	81 b3       	in	r24, 0x11	; 17
  60:	80 6f       	ori	r24, 0xF0	; 240
  62:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(MOTOR_PD);
  64:	82 b3       	in	r24, 0x12	; 18
  66:	8f 70       	andi	r24, 0x0F	; 15
  68:	82 bb       	out	0x12, r24	; 18
	DDRC |= MOTOR_PC;
  6a:	84 b3       	in	r24, 0x14	; 20
  6c:	8c 63       	ori	r24, 0x3C	; 60
  6e:	84 bb       	out	0x14, r24	; 20
	PORTD &= ~(MOTOR_PC);
  70:	82 b3       	in	r24, 0x12	; 18
  72:	83 7c       	andi	r24, 0xC3	; 195
  74:	82 bb       	out	0x12, r24	; 18
	// set ports to default STEP1
	M0_STEP1;
  76:	82 b3       	in	r24, 0x12	; 18
  78:	80 63       	ori	r24, 0x30	; 48
  7a:	82 bb       	out	0x12, r24	; 18
  7c:	82 b3       	in	r24, 0x12	; 18
  7e:	8f 73       	andi	r24, 0x3F	; 63
  80:	82 bb       	out	0x12, r24	; 18
	M1_STEP1;
  82:	85 b3       	in	r24, 0x15	; 21
  84:	88 61       	ori	r24, 0x18	; 24
  86:	85 bb       	out	0x15, r24	; 21
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	8b 7d       	andi	r24, 0xDB	; 219
  8c:	85 bb       	out	0x15, r24	; 21
}
  8e:	08 95       	ret

00000090 <ADC_init>:

/*
 * Analog-Digital-Converter interface initialization
 */
void ADC_init(void) {
	ADMUX |= (1<<REFS0)|(1<<REFS1);								// 2,56V
  90:	87 b1       	in	r24, 0x07	; 7
  92:	80 6c       	ori	r24, 0xC0	; 192
  94:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<ADLAR);										// ADCH only
  96:	3d 9a       	sbi	0x07, 5	; 7
																// ADC0 by default
	ADCSRA |= (1<<ADIE);										// ADC interrupt flag
  98:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA |= (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);		// prescaler 128
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	87 68       	ori	r24, 0x87	; 135
  9e:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADSC);										// initial measurement
  a0:	36 9a       	sbi	0x06, 6	; 6
}
  a2:	08 95       	ret

000000a4 <SPI_init>:

/*
 * SPI transfer interface initialization
 */
void SPI_init(void) {
	DDRB |= MISO;
  a4:	bc 9a       	sbi	0x17, 4	; 23
	SPCR |= (1<<SPIE)|(1<<SPE);
  a6:	8d b1       	in	r24, 0x0d	; 13
  a8:	80 6c       	ori	r24, 0xC0	; 192
  aa:	8d b9       	out	0x0d, r24	; 13
}
  ac:	08 95       	ret

000000ae <Timer0_init>:

/*
 * Initialize Timer0 for switching steps on stepping motors
 */
void Timer0_init(void) {
	TCCR0 |= (1<<CS01);							// no prescaler
  ae:	83 b7       	in	r24, 0x33	; 51
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);						// overflow IRQ
  b4:	89 b7       	in	r24, 0x39	; 57
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	89 bf       	out	0x39, r24	; 57
}
  ba:	08 95       	ret

000000bc <__vector_10>:

/*
 * SPI interrupt handle
 * - r/w
 */
ISR(SPI_STC_vect) {
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	btn_state[j] = SPDR;
  cc:	e0 91 7a 00 	lds	r30, 0x007A
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	8f b1       	in	r24, 0x0f	; 15
  d4:	e1 59       	subi	r30, 0x91	; 145
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	80 83       	st	Z, r24
	if(j<5) {
  da:	80 91 7a 00 	lds	r24, 0x007A
  de:	85 30       	cpi	r24, 0x05	; 5
  e0:	30 f4       	brcc	.+12     	; 0xee <__vector_10+0x32>
		j++;
  e2:	80 91 7a 00 	lds	r24, 0x007A
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 7a 00 	sts	0x007A, r24
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__vector_10+0x36>
	} else {
		j = 0;
  ee:	10 92 7a 00 	sts	0x007A, r1
	}
	SPDR = memory_state[j];
  f2:	e0 91 7a 00 	lds	r30, 0x007A
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	e7 59       	subi	r30, 0x97	; 151
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	80 81       	ld	r24, Z
  fe:	8f b9       	out	0x0f, r24	; 15
}
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <__vector_14>:
/*
 * ADC interrupt handler
 * - take value as raw 8bit reading
 * - update SPI data of speed
 */
ISR(ADC_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
	// 0 - 255
	set_speed = memory_state[5] = ADCH;
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	80 93 6e 00 	sts	0x006E, r24
 122:	80 91 6e 00 	lds	r24, 0x006E
 126:	80 93 66 00 	sts	0x0066, r24
}
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <main>:

/************************************************* MAIN *************************************************/
int main(void)
{
	motor_ports_init();
 136:	93 df       	rcall	.-218    	; 0x5e <motor_ports_init>
	Timer0_init();
 138:	ba df       	rcall	.-140    	; 0xae <Timer0_init>
	SPI_init();
 13a:	b4 df       	rcall	.-152    	; 0xa4 <SPI_init>
	ADC_init();
 13c:	a9 df       	rcall	.-174    	; 0x90 <ADC_init>
	sei();
 13e:	78 94       	sei
				motor_speed[0] = M0_SPD_L;
			} else {
				motor_speed[0] = set_speed;
			}
			if (set_speed > M1_SPD_H) {
				motor_speed[1] = M1_SPD_H;
 140:	8c ed       	ldi	r24, 0xDC	; 220
	SPI_init();
	ADC_init();
	sei();
	while(1)
	{
		if (current_state == STATE_RUNNING) {
 142:	90 91 7d 00 	lds	r25, 0x007D
 146:	91 30       	cpi	r25, 0x01	; 1
 148:	69 f4       	brne	.+26     	; 0x164 <main+0x2e>
			 *	  (course > 1) { reverse o course*VACUM_WIDTH }
			 * 2. (œrodek) { odwróæ o 90deg }
			 *    (lewy) { odwróc o 45deg }
			 * 3. jedŸ
			 */
			if (btn_state[0] == BTN_ON) {
 14a:	90 91 6f 00 	lds	r25, 0x006F
 14e:	91 30       	cpi	r25, 0x01	; 1
 150:	19 f4       	brne	.+6      	; 0x158 <main+0x22>
				// jeb³ œrodek
				btn_state[0] = BTN_OFF;
 152:	10 92 6f 00 	sts	0x006F, r1
 156:	06 c0       	rjmp	.+12     	; 0x164 <main+0x2e>
			} else if (btn_state[1] == BTN_ON) {
 158:	90 91 70 00 	lds	r25, 0x0070
 15c:	91 30       	cpi	r25, 0x01	; 1
 15e:	11 f4       	brne	.+4      	; 0x164 <main+0x2e>
				// jeb³ lewy
				btn_state[1] = BTN_OFF;
 160:	10 92 70 00 	sts	0x0070, r1
			}
		}

		if (btn_get_flag == BTN_GET_ON) {
 164:	90 91 7b 00 	lds	r25, 0x007B
 168:	98 32       	cpi	r25, 0x28	; 40
 16a:	59 f7       	brne	.-42     	; 0x142 <main+0xc>

			if (btn_state[5] == BTN_L && current_state == STATE_IDLE) {
 16c:	90 91 74 00 	lds	r25, 0x0074
 170:	91 30       	cpi	r25, 0x01	; 1
 172:	21 f4       	brne	.+8      	; 0x17c <main+0x46>
 174:	20 91 7d 00 	lds	r18, 0x007D
 178:	22 23       	and	r18, r18
 17a:	41 f0       	breq	.+16     	; 0x18c <main+0x56>
				// wciœniêto start podczas gdy w idle
				current_state = STATE_RUNNING;
				btn_state[5] = BTN_OFF;
			} else if (btn_state[5] == BTN_R && current_state == STATE_RUNNING) {
 17c:	90 91 74 00 	lds	r25, 0x0074
 180:	92 30       	cpi	r25, 0x02	; 2
 182:	41 f4       	brne	.+16     	; 0x194 <main+0x5e>
 184:	20 91 7d 00 	lds	r18, 0x007D
 188:	21 30       	cpi	r18, 0x01	; 1
 18a:	21 f4       	brne	.+8      	; 0x194 <main+0x5e>
				// wciœniêto reset podczas gdy odkurza³
				current_state = STATE_RESETTING;
 18c:	90 93 7d 00 	sts	0x007D, r25
				btn_state[5] = BTN_OFF;
 190:	10 92 74 00 	sts	0x0074, r1
			}

			// refresh current memory
			//memory_state[0] = mode;
			memory_state[1] = total_dist;
 194:	90 91 79 00 	lds	r25, 0x0079
 198:	90 93 6a 00 	sts	0x006A, r25
			//memory_state[2] = ;
			//memory_state[3] = ;
			//memory_state[4] = ;

			// measure value for speed
			ADCSRA |= (1<<ADSC);
 19c:	36 9a       	sbi	0x06, 6	; 6

			// set motors speed
			if (set_speed > M0_SPD_H) {
 19e:	90 91 66 00 	lds	r25, 0x0066
 1a2:	9d 3d       	cpi	r25, 0xDD	; 221
 1a4:	18 f0       	brcs	.+6      	; 0x1ac <main+0x76>
				motor_speed[0] = M0_SPD_H;
 1a6:	80 93 67 00 	sts	0x0067, r24
 1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <main+0x82>
			} else if (set_speed < M0_SPD_L) {
 1ac:	90 91 66 00 	lds	r25, 0x0066
				motor_speed[0] = M0_SPD_L;
			} else {
				motor_speed[0] = set_speed;
 1b0:	90 91 66 00 	lds	r25, 0x0066
 1b4:	90 93 67 00 	sts	0x0067, r25
			}
			if (set_speed > M1_SPD_H) {
 1b8:	90 91 66 00 	lds	r25, 0x0066
 1bc:	9d 3d       	cpi	r25, 0xDD	; 221
 1be:	18 f0       	brcs	.+6      	; 0x1c6 <main+0x90>
				motor_speed[1] = M1_SPD_H;
 1c0:	80 93 68 00 	sts	0x0068, r24
 1c4:	06 c0       	rjmp	.+12     	; 0x1d2 <main+0x9c>
			} else if (set_speed < M1_SPD_L) {
 1c6:	90 91 66 00 	lds	r25, 0x0066
				motor_speed[1] = M1_SPD_L;
			} else {
				motor_speed[1] = set_speed;
 1ca:	90 91 66 00 	lds	r25, 0x0066
 1ce:	90 93 68 00 	sts	0x0068, r25
			}

			// clear button flag
			btn_get_flag = 0;
 1d2:	10 92 7b 00 	sts	0x007B, r1
 1d6:	b5 cf       	rjmp	.-150    	; 0x142 <main+0xc>

000001d8 <motor_make_step>:

/*
 *	Toggle ports states to switch coil set - make step
 */
void motor_make_step(uint8_t motor, uint8_t step) {
	if (step>4) {
 1d8:	65 30       	cpi	r22, 0x05	; 5
 1da:	18 f4       	brcc	.+6      	; 0x1e2 <motor_make_step+0xa>
		step = 1;
	} else if (step<1) {
 1dc:	66 23       	and	r22, r22
 1de:	19 f0       	breq	.+6      	; 0x1e6 <motor_make_step+0xe>
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <motor_make_step+0x10>
/*
 *	Toggle ports states to switch coil set - make step
 */
void motor_make_step(uint8_t motor, uint8_t step) {
	if (step>4) {
		step = 1;
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <motor_make_step+0x10>
	} else if (step<1) {
		step = 4;
 1e6:	64 e0       	ldi	r22, 0x04	; 4
	}
	if (motor==0) {
 1e8:	88 23       	and	r24, r24
 1ea:	d9 f4       	brne	.+54     	; 0x222 <motor_make_step+0x4a>
		switch(step) {
 1ec:	63 30       	cpi	r22, 0x03	; 3
 1ee:	71 f0       	breq	.+28     	; 0x20c <motor_make_step+0x34>
 1f0:	64 30       	cpi	r22, 0x04	; 4
 1f2:	99 f0       	breq	.+38     	; 0x21a <motor_make_step+0x42>
 1f4:	62 30       	cpi	r22, 0x02	; 2
 1f6:	31 f0       	breq	.+12     	; 0x204 <motor_make_step+0x2c>
			case 1:
				M0_STEP1;
 1f8:	92 b3       	in	r25, 0x12	; 18
 1fa:	90 63       	ori	r25, 0x30	; 48
 1fc:	92 bb       	out	0x12, r25	; 18
 1fe:	92 b3       	in	r25, 0x12	; 18
 200:	9f 73       	andi	r25, 0x3F	; 63
 202:	09 c0       	rjmp	.+18     	; 0x216 <motor_make_step+0x3e>
				break;
			case 2:
				M0_STEP2;
 204:	95 9a       	sbi	0x12, 5	; 18
 206:	92 b3       	in	r25, 0x12	; 18
 208:	9f 72       	andi	r25, 0x2F	; 47
 20a:	05 c0       	rjmp	.+10     	; 0x216 <motor_make_step+0x3e>
				break;
			case 3:
				M0_STEP3;
 20c:	92 b3       	in	r25, 0x12	; 18
 20e:	90 66       	ori	r25, 0x60	; 96
 210:	92 bb       	out	0x12, r25	; 18
 212:	92 b3       	in	r25, 0x12	; 18
 214:	9f 76       	andi	r25, 0x6F	; 111
 216:	92 bb       	out	0x12, r25	; 18
				break;
 218:	24 c0       	rjmp	.+72     	; 0x262 <motor_make_step+0x8a>
			case 4:
				M0_STEP4;
 21a:	96 9a       	sbi	0x12, 6	; 18
 21c:	92 b3       	in	r25, 0x12	; 18
 21e:	9f 74       	andi	r25, 0x4F	; 79
 220:	fa cf       	rjmp	.-12     	; 0x216 <motor_make_step+0x3e>
				break;
			case 8:
				M0_STEP8;
				break;
		}
	} else if (motor==1) {
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	f1 f4       	brne	.+60     	; 0x262 <motor_make_step+0x8a>
		switch(step) {
 226:	63 30       	cpi	r22, 0x03	; 3
 228:	81 f0       	breq	.+32     	; 0x24a <motor_make_step+0x72>
 22a:	64 30       	cpi	r22, 0x04	; 4
 22c:	a1 f0       	breq	.+40     	; 0x256 <motor_make_step+0x7e>
 22e:	62 30       	cpi	r22, 0x02	; 2
 230:	31 f0       	breq	.+12     	; 0x23e <motor_make_step+0x66>
			case 1:
				M1_STEP1;
 232:	95 b3       	in	r25, 0x15	; 21
 234:	98 61       	ori	r25, 0x18	; 24
 236:	95 bb       	out	0x15, r25	; 21
 238:	95 b3       	in	r25, 0x15	; 21
 23a:	9b 7d       	andi	r25, 0xDB	; 219
 23c:	11 c0       	rjmp	.+34     	; 0x260 <motor_make_step+0x88>
				break;
			case 2:
				M1_STEP2;
 23e:	95 b3       	in	r25, 0x15	; 21
 240:	9c 60       	ori	r25, 0x0C	; 12
 242:	95 bb       	out	0x15, r25	; 21
 244:	95 b3       	in	r25, 0x15	; 21
 246:	9f 7c       	andi	r25, 0xCF	; 207
 248:	0b c0       	rjmp	.+22     	; 0x260 <motor_make_step+0x88>
				break;
			case 3:
				M1_STEP3;
 24a:	95 b3       	in	r25, 0x15	; 21
 24c:	94 62       	ori	r25, 0x24	; 36
 24e:	95 bb       	out	0x15, r25	; 21
 250:	95 b3       	in	r25, 0x15	; 21
 252:	97 7e       	andi	r25, 0xE7	; 231
 254:	05 c0       	rjmp	.+10     	; 0x260 <motor_make_step+0x88>
				break;
			case 4:
				M1_STEP4;
 256:	95 b3       	in	r25, 0x15	; 21
 258:	90 63       	ori	r25, 0x30	; 48
 25a:	95 bb       	out	0x15, r25	; 21
 25c:	95 b3       	in	r25, 0x15	; 21
 25e:	93 7f       	andi	r25, 0xF3	; 243
 260:	95 bb       	out	0x15, r25	; 21
			case 8:
				//M1_STEP8;
				break;
		}
	}
	motor_current_step[motor] = step;
 262:	e8 2f       	mov	r30, r24
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	e0 5a       	subi	r30, 0xA0	; 160
 268:	ff 4f       	sbci	r31, 0xFF	; 255
 26a:	60 83       	st	Z, r22
}
 26c:	08 95       	ret

0000026e <motor_move>:

/*
 * Move servo in particular directory by requesting step change
 */
void motor_move(uint8_t motor, uint8_t dir) {
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	08 2f       	mov	r16, r24
 274:	16 2f       	mov	r17, r22
 276:	28 2f       	mov	r18, r24
 278:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t next_step = (dir==1) ? motor_current_step[motor]+1 : motor_current_step[motor]-1;		// 0-8
 27a:	61 30       	cpi	r22, 0x01	; 1
 27c:	31 f4       	brne	.+12     	; 0x28a <motor_move+0x1c>
 27e:	20 5a       	subi	r18, 0xA0	; 160
 280:	3f 4f       	sbci	r19, 0xFF	; 255
 282:	f9 01       	movw	r30, r18
 284:	60 81       	ld	r22, Z
 286:	6f 5f       	subi	r22, 0xFF	; 255
 288:	05 c0       	rjmp	.+10     	; 0x294 <motor_move+0x26>
 28a:	20 5a       	subi	r18, 0xA0	; 160
 28c:	3f 4f       	sbci	r19, 0xFF	; 255
 28e:	f9 01       	movw	r30, r18
 290:	60 81       	ld	r22, Z
 292:	61 50       	subi	r22, 0x01	; 1
	motor_make_step(motor, next_step);
 294:	80 2f       	mov	r24, r16
 296:	a0 df       	rcall	.-192    	; 0x1d8 <motor_make_step>
	if (motor==0) {
 298:	00 23       	and	r16, r16
 29a:	51 f5       	brne	.+84     	; 0x2f0 <motor_move+0x82>
		if (dir==0 && motor_pos[0]==M0_POS_MIN) {
 29c:	11 23       	and	r17, r17
 29e:	49 f4       	brne	.+18     	; 0x2b2 <motor_move+0x44>
 2a0:	80 91 62 00 	lds	r24, 0x0062
 2a4:	90 91 63 00 	lds	r25, 0x0063
 2a8:	00 97       	sbiw	r24, 0x00	; 0
 2aa:	c1 f4       	brne	.+48     	; 0x2dc <motor_move+0x6e>
			motor_pos[0] = M0_POS_MAX;
 2ac:	80 e9       	ldi	r24, 0x90	; 144
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	1a c0       	rjmp	.+52     	; 0x2e6 <motor_move+0x78>
		} else if (dir==1 && motor_pos[0]==M0_POS_MAX) {
 2b2:	11 30       	cpi	r17, 0x01	; 1
 2b4:	99 f4       	brne	.+38     	; 0x2dc <motor_move+0x6e>
 2b6:	80 91 62 00 	lds	r24, 0x0062
 2ba:	90 91 63 00 	lds	r25, 0x0063
 2be:	f1 e0       	ldi	r31, 0x01	; 1
 2c0:	80 39       	cpi	r24, 0x90	; 144
 2c2:	9f 07       	cpc	r25, r31
 2c4:	29 f4       	brne	.+10     	; 0x2d0 <motor_move+0x62>
			motor_pos[0] = M0_POS_MIN;
 2c6:	10 92 63 00 	sts	0x0063, r1
 2ca:	10 92 62 00 	sts	0x0062, r1
 2ce:	25 c0       	rjmp	.+74     	; 0x31a <motor_move+0xac>
		} else {
			motor_pos[0] = (dir==1) ? motor_pos[0]+1 : motor_pos[0]-1;
 2d0:	80 91 62 00 	lds	r24, 0x0062
 2d4:	90 91 63 00 	lds	r25, 0x0063
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	05 c0       	rjmp	.+10     	; 0x2e6 <motor_move+0x78>
 2dc:	80 91 62 00 	lds	r24, 0x0062
 2e0:	90 91 63 00 	lds	r25, 0x0063
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	90 93 63 00 	sts	0x0063, r25
 2ea:	80 93 62 00 	sts	0x0062, r24
 2ee:	15 c0       	rjmp	.+42     	; 0x31a <motor_move+0xac>
		}
	} else if (motor==1) {
 2f0:	01 30       	cpi	r16, 0x01	; 1
 2f2:	99 f4       	brne	.+38     	; 0x31a <motor_move+0xac>
		if (dir==0) {
 2f4:	11 23       	and	r17, r17
 2f6:	31 f4       	brne	.+12     	; 0x304 <motor_move+0x96>
			motor_pos[1]--;
 2f8:	80 91 64 00 	lds	r24, 0x0064
 2fc:	90 91 65 00 	lds	r25, 0x0065
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	07 c0       	rjmp	.+14     	; 0x312 <motor_move+0xa4>
		} else if (dir==1) {
 304:	11 30       	cpi	r17, 0x01	; 1
 306:	49 f4       	brne	.+18     	; 0x31a <motor_move+0xac>
			motor_pos[1]++;
 308:	80 91 64 00 	lds	r24, 0x0064
 30c:	90 91 65 00 	lds	r25, 0x0065
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	90 93 65 00 	sts	0x0065, r25
 316:	80 93 64 00 	sts	0x0064, r24
		}
	}
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	08 95       	ret

00000320 <__vector_9>:
}

/*
 * Timer0 interrupt handler
 */
ISR(TIMER0_OVF_vect) {
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	2f 93       	push	r18
 32c:	3f 93       	push	r19
 32e:	4f 93       	push	r20
 330:	5f 93       	push	r21
 332:	6f 93       	push	r22
 334:	7f 93       	push	r23
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
 33a:	af 93       	push	r26
 33c:	bf 93       	push	r27
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
	if (stepper_flag > (255 - motor_speed[0])) {
 342:	20 91 7c 00 	lds	r18, 0x007C
 346:	40 91 67 00 	lds	r20, 0x0067
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	84 1b       	sub	r24, r20
 352:	91 09       	sbc	r25, r1
 354:	82 17       	cp	r24, r18
 356:	93 07       	cpc	r25, r19
 358:	1c f4       	brge	.+6      	; 0x360 <__vector_9+0x40>
		stepper_flag = 0;
 35a:	10 92 7c 00 	sts	0x007C, r1
 35e:	05 c0       	rjmp	.+10     	; 0x36a <__vector_9+0x4a>
	} else {
		stepper_flag++;
 360:	80 91 7c 00 	lds	r24, 0x007C
 364:	8f 5f       	subi	r24, 0xFF	; 255
 366:	80 93 7c 00 	sts	0x007C, r24
	}

	if (stepper_flag == 0) {
 36a:	80 91 7c 00 	lds	r24, 0x007C
 36e:	88 23       	and	r24, r24
 370:	99 f4       	brne	.+38     	; 0x398 <__vector_9+0x78>
		motor_move(0,0); // temp for test
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	7c df       	rcall	.-264    	; 0x26e <motor_move>
		motor_move(1,0); // temp for test
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	79 df       	rcall	.-270    	; 0x26e <motor_move>
		if (current_mode == MODE_PROGRESSING) {
 37c:	80 91 7e 00 	lds	r24, 0x007E
 380:	88 23       	and	r24, r24
 382:	51 f0       	breq	.+20     	; 0x398 <__vector_9+0x78>
			// both same speed forward
			//motor_move(0,0);
			//motor_move(1,0);
		} else if (current_mode == MODE_REVERSING) {
 384:	80 91 7e 00 	lds	r24, 0x007E
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	31 f0       	breq	.+12     	; 0x398 <__vector_9+0x78>
			// both same speed reverse
			//motor_move(0,1);
			//motor_move(1,1);
		} else if (current_mode == MODE_BACK90_TURNING) {
 38c:	80 91 7e 00 	lds	r24, 0x007E
 390:	83 30       	cpi	r24, 0x03	; 3
 392:	11 f0       	breq	.+4      	; 0x398 <__vector_9+0x78>
			// turning 90deg to back
			//motor_move(0,1);
		} else if (current_mode == MODE_BACK45_TURNING) {
 394:	80 91 7e 00 	lds	r24, 0x007E
			// turning 45deg to back
			//motor_move(0,1);
		}
	}

	btn_get_flag++;
 398:	80 91 7b 00 	lds	r24, 0x007B
 39c:	8f 5f       	subi	r24, 0xFF	; 255
 39e:	80 93 7b 00 	sts	0x007B, r24
}
 3a2:	ff 91       	pop	r31
 3a4:	ef 91       	pop	r30
 3a6:	bf 91       	pop	r27
 3a8:	af 91       	pop	r26
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	7f 91       	pop	r23
 3b0:	6f 91       	pop	r22
 3b2:	5f 91       	pop	r21
 3b4:	4f 91       	pop	r20
 3b6:	3f 91       	pop	r19
 3b8:	2f 91       	pop	r18
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
